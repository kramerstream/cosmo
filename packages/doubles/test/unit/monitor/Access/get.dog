use (
  alias:expected
  {monitor} = ~
  ~/lib/monitor/Result
  ~/lib/monitor/log/AccessKind
)

export suite(__filename, proc()
  teardown("Clear monitors created")

  test("when no error raised, log must be updated and value returned", proc()
    const target = {x = 11, y = 22}

    #(1) act
    const p = monitor(target)
    expected(p.x).toBeEqualTo(11)
    expected(p.y).toBeEqualTo(22)
    expected(p.z).toBeNil()

    #(2) assert
    const log = monitor.log(p)
    expected(log).toHaveLen(3)
    expected(log.items).it(0).toHave(member = "x").it(1).toHave(member = "y").it(2).toHave(member = "z")
    expected(log.returnedType(num)).toBeEqualTo(2)
    expected(log.getEntry(0)).toBe("Access").toHave(
      value = 11
      result = Result.RETURN
      member = "x"
      kind = AccessKind.GET
    )
    expected(log.getAccess(0)).toBe("Access").toHave(
      value = 11
      result = Result.RETURN
      member = "x"
      kind = AccessKind.GET
    )
  end)

  test("when error raised, log must be updated and the error raised", proc()
    struct Point2D
      pub const x
      pub const y
      pub fn z = throw("my error")

    const target = Point2D(x = 11, y = 22)

    #(1) act
    const p = monitor(target)
    expected(p).toBe(Point2D)
    expected(p.x).toBeEqualTo(11)
    expected(p.y).toBeEqualTo(22)
    expected(proc() p.z end).toRaise("my error")

    #(2) assert
    const log = monitor.log(p)
    expected(log).toHaveLen(3).member("accesses").toBeEqualTo(3)
    expected(log.items).it(0).toHave(member = "x").it(1).toHave(member = "y").it(2).toHave(member = "z")
    expected(log.returns).toBeEqualTo(2)
    expected(log.raises).toBeEqualTo(1)
    expected(log.raisedValue("my error")).toBeEqualTo(1)
    expected(log.raisedType(text)).toBeEqualTo(1)
  end)

  test("when given fields, only these fields must be monitored", proc()
    const target = {x = 11, y = 22, z = 33}

    #(1) act
    const p = monitor(target, members = ["x", "z"])
    expected(p.x).toBeEqualTo(11)
    expected(p.y).toBeEqualTo(22)
    expected(p.z).toBeEqualTo(33)

    #(2) assert
    const log = monitor.log(p)
    expected(log).toHaveLen(2)
    expected(log.items).it(0).toHave(member = "x").it(1).toHave(member = "z")
  end)
end)
