use (
  alias:expected
  {monitor} = ~
  ~/lib/monitor/Result
)

struct MyStruct
  pub var x = 1
  pub fn returnNum() = num(timestamp())
  pub proc raiseError() throw("my error")

export suite(__filename, proc()
  teardown("Clear monitors created")

  test("when not onlyCalls and no error raised, log must be updated and value returned", proc()
    const target = MyStruct()

    #(1) act
    const p = monitor(target)
    expected(p.returnNum()).toBeNum()
    expected(p.returnNum()).toBeNum()

    #(2) assert
    const log = monitor.log(p)

    expected(log).toHaveLen(4)\
                 .member("accesses").toBeEqualTo(2)\
                 .member("calls").toBeEqualTo(2)\
                 .member("returns").toBeEqualTo(4)

    for each i in [0, 1] do
      expected(log.getCall(i)).toBe("Call").toHave(
        result = Result.RETURN
        args = []
      ).member("value").toBeNum()
  end)

  test("when onlyCalls and returning and raising, log must be updated returning and raising", proc()
    const target = MyStruct()

    #(1) act
    const p = monitor(target, onlyCalls = true)
    expected(p.returnNum()).toBeNum()
    expected(proc() p.raiseError() end).toRaise()

    #(2) assert
    const log = monitor.log(p)
    expected(log).toHaveLen(2)\
                 .member("calls").toBeEqualTo(2)\
                 .member("returns").toBeEqualTo(1)\
                 .member("raises").toBeEqualTo(1)
    expected(log.getCall(0)).toBe("Call").toHave(
      result = Result.RETURN
      args = []
    ).member("value").toBeNum()
    expected(log.getCall(1)).toBe("Call").toHave(
      result = Result.THROW
      args = []
    ).member("value").toBeEqualTo("my error")
  end)

  test("when calledWith() used, times called with the arguments must be returned", proc()
    const target = fn(x, y) = x + y end

    #(1) act
    const p = monitor(target)
    expected(p(11, 22)).toBeEqualTo(33)
    expected(p(11, 22)).toBeEqualTo(33)
    expected(p(22, 33)).toBeEqualTo(55)

    #(2) assert
    const log = monitor.log(p)
    expected(log).toHaveLen(3)
    expected(log.calledWith([11, 22])).toBeEqualTo(2)
    expected(log.calledWith([22])).toBeEqualTo(0)
    expected(log.calledWith([22, 33])).toBeEqualTo(1)
    expected(log.returnedValue(33)).toBeEqualTo(2)
    expected(log.returnedValue(55)).toBeEqualTo(1)
    expected(log.returnedValue(66)).toBeEqualTo(0)
  end)
end)
