use (
  alias:expected
  {mock} = ~
)

const {field, fun} = mock

export suite(__filename, proc()
  test("when well-defined, object mock must be returned", proc()
    #(1) act
    const o = mock({
      a = field.uuid()
      b = field.list()
      c = field.map()
      x = field([{returns = 1234}, {returns = 4321}])
      y = fun({returns = 12345678})
    })

    #(2) assert
    expected(o).notToBeCallable()
    expected(o.a).toBeUuid()
    expected(o.b).toBeList().toBeEmpty()
    expected(o.c).toBeMap().toBeEmpty() 
    expected(o.x).toBeEqualTo(1234)
    expected(o.y()).toBeEqualTo(12345678)
    expected(o.y()).toBeEqualTo(12345678)
    expected(o.a).toBeUuid()
    expected(o.x).toBeEqualTo(4321)
  end)

  test("when object mock called, JS-engine error must be raised", proc()
    #(1) act
    const o = mock({})

    #(2) assert
    expected(o).notToBeCallable()
    expected(proc() o() end).toRaise(TypeError("o is not a function"))
  end)

  test("when field() or fun() not used for member, error must be raised", proc()
    expected(proc()
      mock(x = "invalid value")
    end).toRaise(TypeError("Member x must be field mock or function mock."))
  end)
end)
