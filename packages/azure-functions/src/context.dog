use (
  alias:path
  {v4 as uuid} = pkg:uuid
  {mock} = alias:doubles
  executionContext
  traceContext
  logger
)

const {fun, field} = mock

/**
 * Returns a mock for a Context.
 * We have to set, mandatorily, [functionName] and [functionDirectory].
 */
export fn context(opts:> {functionName: text, functionDirectory: text, bindings?: map, req?}) -> m
  #(1) prepare
  const (
    invocationId = uuid()
    bindingDefinitions = use(path.join(functionDirectory, "function.json")).bindings
  )

  if not bindings and req then
    bindings = {
      req =
        method = req.method
        url = req.url
        originalUrl = req.originalUrl
        headeres = req.headers
        query = req.query
        params = req.params
        body = req.body
        rawBody = req.rawBody
    }

  #(2) create mock
  m = mock({
    invocationId = field.text(invocationId)
    executionContext = executionContext(invocationId=, functionName, functionDirectory)
    traceContext = traceContext()
    bindings = field.map(bindings)
    bindingData = field.map()
    bindingDefinitions = field.list(bindingDefinitions)
    log = logger()
    done = fun()
    if req then req
    if opts.res then res = opts.res
  })
