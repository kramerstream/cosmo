use (
  alias:expected
  alias:path
  {context} = ~
)

export suite(__filename, proc()
  const (
    functionName = "http"
    functionDirectory = path.join(__dirname, $"../../data/${functionName}")
  )

  test("when mock created w/o req, mock must not have req", proc()
    #(1) act
    const m = context(functionDirectory=, functionName)

    #(2) assert
    expected(m).member("invocationId").toBeUuid()
    expected(m.executionContext).toHave(functionName=, functionDirectory).member("invocationId").toBeUuid()
    expected(m).member("bindings").toBeMap().member("bindingData").toBeMap()
    expected(m.traceContext).member("attributes").toBeMap()
    expected(m.log).toBeFn()
    expected(m.done).toBeFn()
    expected(m).notToHave("req")
    expected(m.bindingDefinitions).toBeList().it(0).toHave('type' = "httpTrigger")
  end)

  test("when mock created w/ req, mock must have req", proc()
    #(1) act
    const (
      req = {}
      res = {}
      m = context(functionDirectory=, req, res)
    )

    #(2) assert
    expected(m).toHave(req=, res).member("invocationId").toBeUuid()
    expected(m.executionContext).toHave(functionName=, functionDirectory).member("invocationId").toBeUuid()
    expected(m).member("bindings").toBeMap().member("bindingData").toBeMap()
    expected(m.traceContext).member("attributes").toBeMap()
    expected(m.log).toBeFn()
    expected(m.done).toBeFn()
  end)
end)
